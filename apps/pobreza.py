import streamlit as st
from streamlit_folium import folium_static
import folium
import geopandas as gpd
import pandas as pd
import plotly.express as px
import requests, zipfile, io


def app():

    titl, imga = st.columns((4, 0.8))
    imga.image('E-WEB-Goal-01.png')
    titl.title('ODS 1: Erradica√ß√£o da pobreza')
    st.subheader('Objetivo 1: Erradicar a pobreza em todas as formas e em todos os lugares')
    st.write('Cada ODS apresenta uma s√©rie de indicadores, que representam objetivos menores que auxiliam a atingir o objetivo principal. '
             'Voc√™ pode visualizar todos os indicadores criados para esse ODS, expandindo a se√ß√£o a seguir.')

    with st.expander(label='Indicadores do Objetivo 1'):
        st.write('**1.1** At√© 2030, erradicar a pobreza extrema para todas as pessoas em todos os lugares, atualmente medida como pessoas vivendo com menos de US$ 1,90 por dia')
        st.write('**1.2** At√© 2030, reduzir pelo menos √† metade a propor√ß√£o de homens, mulheres e crian√ßas, de todas as idades, que vivem na pobreza, em todas as suas dimens√µes, de acordo com as defini√ß√µes nacionais')
        st.write('**1.3** Implementar, em n√≠vel nacional, medidas e sistemas de prote√ß√£o social adequados, para todos, incluindo pisos, e at√© 2030 atingir a cobertura substancial dos pobres e vulner√°veis')
        st.write('**1.4** At√© 2030, garantir que todos os homens e mulheres, particularmente os pobres e vulner√°veis, tenham direitos iguais aos recursos econ√¥micos, bem como o acesso a servi√ßos b√°sicos, propriedade e controle sobre a terra e outras formas de propriedade, heran√ßa, recursos naturais, novas tecnologias apropriadas e servi√ßos financeiros, incluindo microfinan√ßas')
        st.write('**1.5** At√© 2030, construir a resili√™ncia dos pobres e daqueles em situa√ß√£o de vulnerabilidade, e reduzir a exposi√ß√£o e vulnerabilidade destes a eventos extremos relacionados com o clima e outros choques e desastres econ√¥micos, sociais e ambientais')
        st.write('**1.a** Garantir uma mobiliza√ß√£o significativa de recursos a partir de uma variedade de fontes, inclusive por meio do refor√ßo da coopera√ß√£o para o desenvolvimento, para proporcionar meios adequados e previs√≠veis para que os pa√≠ses em desenvolvimento, em particular os pa√≠ses menos desenvolvidos, implementem programas e pol√≠ticas para acabar com a pobreza em todas as suas dimens√µes')
        st.write('**1.b** Criar marcos pol√≠ticos s√≥lidos em n√≠veis nacional, regional e internacional, com base em estrat√©gias de desenvolvimento a favor dos pobres e sens√≠veis a g√™nero, para apoiar investimentos acelerados nas a√ß√µes de erradica√ß√£o da pobreza')

    st.write('A pobreza e a pobreza extrema s√£o pautas amplamente discutidas ao redor do mundo para tentar mitigar o problema. Erradicar a pobreza em todas as suas formas √© o primeiro Objetivo de Desenvolvimento Sustent√°vel e j√° se caracteriza como um objetivo desafiador,'
             ' pois ao mesmo tempo que tem se visto que o n√∫mero de pessoas que vive em situa√ß√£o de extrema pobreza diminuiu em mais da metade entre 1990 e 2015, passando de 1.9 bilh√£o para 836 milh√µes, muitos ainda sofrem para ter acesso √†s necessidades b√°sicas do ser humano. ')
    st.write(
        '**Indicador 1.1: Mapeando a popula√ß√£o que vive abaixo da linha de pobreza internacional**')
    st.write('Buscar atingir o ODS √© assumir um comprometimento ousado mas importante para dar visibilidade aos mais vulner√°veis, apoiar comunidades que sustentam a causa e a satisfazer o acesso a servi√ßos b√°sicos da sociedade.')

    st.write(
        """A propor√ß√£o da popula√ß√£o que vive abaixo da linha de pobreza extrema caiu de 22% em 1990 para 4% em 2018.
        O mapa a seguir mostra a taxa (em porcentagem) da popula√ß√£o que vive abaixo dessa linha, por pa√≠s.""")

    poverty1 = gpd.read_file(
        'https://services7.arcgis.com/gp50Ao2knMlOM89z/arcgis/rest/services/SI_POV_DAY1_1_1_1_2020Q2G03/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson')

    style = {'fillColor': '#f5f5f5', 'lineColor': '#ffffbf'}
    st.subheader('Taxa da popula√ß√£o que vive abaixo da linha da pobreza por pa√≠s')
    m = folium.Map(location=[26.972058, 28.642816], tiles='Stamen Terrain', zoom_start=1.5, control_scale=True)
    folium.GeoJson(
        poverty1,
        name='Propor√ß√£o em %',
        style_function=lambda x: style,
        popup="√∫ltima propor√ß√£o conhecida: ",
        tooltip=folium.features.GeoJsonTooltip(
            fields=['geoAreaName', 'latest_value'],
            aliases=['Pa√≠s (√Årea geogr√°fica): ', 'Propor√ß√£o da popula√ß√£o (%): '],
            style=("background-color: white; color: #333333; font-family: arial; font-size: 12px; padding: 10px; icon=icon"),
            localize=True)
    ).add_to(m)
    folium.LayerControl().add_to(m)
    folium_static(m)
    st.write('**OBS:** Os valores s√£o referentes ao √∫ltimo ano de dados dispon√≠veis.')

    st.write('**Mapeando o PIB per capita interno dos pa√≠ses**')
    with st.expander('Indicador 1.2'):
        st.write('**1.2** At√© 2030, reduzir pelo menos √† metade a propor√ß√£o de homens, mulheres e crian√ßas, de todas as idades, que vivem na pobreza, em todas as suas dimens√µes, de acordo com as defini√ß√µes nacionais')
    st.write('Para atingir o Indicador 1.2, √© importante conhecer as diferentes realidades de cada pa√≠s, e suas defini√ß√µes internas. Dessa forma, √© poss√≠vel mapear o resultado do PIB nacional e visualizar a sua evolu√ß√£o '
             'ao longo do tempo, para entender e quantificar os resultados.')
    st.write('**Resultado do PIB per capita dos pa√≠ses, ao longo dos anos:** Mapear situa√ß√£o de renda da popula√ß√£o global')

    # Bases de dados da biblioteca Ploty (Gapminder)
    df = pd.DataFrame(px.data.gapminder())
    df.head(5)
    a = df.iloc[:, :]
    clist = df['country'].unique()
    country = st.selectbox("Selecione um pa√≠s:", clist)
    fig = px.line(df[df['country'] == country],
                  x="year", y="gdpPercap", title=f'Voc√™ est√° visualizando o PIB do pa√≠s selecionado: {country}')
    st.plotly_chart(fig)
    st.write(df)
    #st.write(clist)

    url = 'http://www.labgeolivre.ufpr.br/arquivos/ne_110m_admin_0_countries.zip'
    filename = 'ne_110m_admin_0_countries.shp'
    r = requests.get(url)
    z = zipfile.ZipFile(io.BytesIO(r.content))
    z.extractall()
    mapa = gpd.read_file(filename, sep=',')
    #st.write(casos)
    group = df.groupby('country')[['iso_alpha']].count()
    st.write(group)
    Join = pd.merge(mapa, df, left_on="ISO_A3_EH", right_on="iso_alpha")
    casos = Join.groupby("gdpPercap")[['country']].count().reset_index()
    #st.write(Join.head(-2))
    st.write(mapa.head(2))

    st.subheader('**Veja o PIB per capita por pa√≠s no mapa:**')
    m = folium.Map(location=[26.972058, 28.642816], tiles='Stamen Terrain', zoom_start=1.5, control_scale=True)
    bins = list(mapa['POP_EST'].quantile([0, 0.1, 0.75, 0.9, 0.98, 1]))
    folium.Choropleth(
        geo_data=Join,
        name='Pa√≠ses',
        #data=df,
        #columns=['country', 'gdpPercap'], #coluna
        key_on='feature.properties.POP_EST',
        fill_color='Reds',
        legend_name='PIB per capita',
        bins=bins,
        #labels={'NAME'}
    ).add_to(m)
    style_function = lambda x: {'fillColor': '#ffffff',
                                'color': '#000000',
                                'fillOpacity': 0,
                                'weight': 0.1}
    highlight_function = lambda x: {'fillColor': '#000000',
                                    'color': '#000000',
                                    'fillOpacity': 0,
                                    'weight': 0.1}
    NIL = folium.features.GeoJson(
        Join,
        style_function=style_function,
        control=False,
        highlight_function=highlight_function,
        tooltip=folium.features.GeoJsonTooltip(
            fields=['NAME', 'gdpPercap'],
            aliases=['Nome do pa√≠s: ', 'PIB per capita:'],
            style=("background-color: white; color: #333333; font-family: arial; font-size: 12px; padding: 10px;"))
    )
    m.add_child(NIL)
    m.keep_in_front(NIL)
    folium.LayerControl().add_to(m)
    folium_static(m)


    st.subheader('Fonte dos dados:')
    st.info("""
            \n üîç Conjunto de dados espaciais de dom√≠nio p√∫blico [Natural Earth](https://www.naturalearthdata.com/downloads/)
            \n üîç Divis√£o de Estat√≠stica das Na√ß√µes Unidas [UN DESA Statistics Division](https://unstats.un.org/sdgs/dataportal)
            \n üîç Dados da biblioteca Ploty [Gapminder](https://www.gapminder.org/)""")
    # Gr√°fico Total de Casos
    #geobr.list_geobr()
    #df = geobr.read_state(code_state="DF", year=2020)
    #df.plot()
